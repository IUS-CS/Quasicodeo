// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using TooBroke.Data;

namespace TooBroke.Migrations
{
    [DbContext(typeof(CalculatorDbContext))]
    partial class CalculatorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TooBroke.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("TooBroke.Models.CalculatorViewModels.BudgetEntry", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<string>("ApplicationUserID");

                    b.Property<int>("CategoryID");

                    b.Property<double>("CurrentBalance");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Budget");
                });

            modelBuilder.Entity("TooBroke.Models.CalculatorViewModels.Category", b =>
                {
                    b.Property<int>("ID");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("TooBroke.Models.CalculatorViewModels.GoalEntry", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserID");

                    b.Property<int>("CategoryID");

                    b.Property<int>("Compound");

                    b.Property<int>("GeneratedPayOff");

                    b.Property<double>("GoalAmount");

                    b.Property<double>("InitialAmount");

                    b.Property<double>("Interest");

                    b.Property<double>("OneTimePayment");

                    b.Property<int>("PaymentFrequency");

                    b.Property<double>("RecurringPayments");

                    b.Property<int>("TargetPayOff");

                    b.Property<int>("Term");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("TooBroke.Models.CalculatorViewModels.TransactionEntry", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<string>("ApplicationUserID");

                    b.Property<int?>("CategoryID");

                    b.Property<string>("Title");

                    b.Property<bool>("Type");

                    b.HasKey("ID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("TooBroke.Models.CalculatorViewModels.BudgetEntry", b =>
                {
                    b.HasOne("TooBroke.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserID");

                    b.HasOne("TooBroke.Models.CalculatorViewModels.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TooBroke.Models.CalculatorViewModels.GoalEntry", b =>
                {
                    b.HasOne("TooBroke.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserID");

                    b.HasOne("TooBroke.Models.CalculatorViewModels.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TooBroke.Models.CalculatorViewModels.TransactionEntry", b =>
                {
                    b.HasOne("TooBroke.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserID");

                    b.HasOne("TooBroke.Models.CalculatorViewModels.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID");
                });
#pragma warning restore 612, 618
        }
    }
}
